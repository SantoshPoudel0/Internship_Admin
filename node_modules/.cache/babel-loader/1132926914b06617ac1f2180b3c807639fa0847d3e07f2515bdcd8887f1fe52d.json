{"ast":null,"code":"import config from '../config';\n\n// Token storage keys\nconst TOKEN_KEY = 'token';\nconst USER_INFO_KEY = 'userInfo';\n\n// Store token and user info\nexport const storeAuthData = (token, userInfo) => {\n  try {\n    console.log('Storing auth data:', {\n      token: !!token,\n      userInfo: !!userInfo\n    });\n    localStorage.setItem(config.auth.tokenKey, token);\n    localStorage.setItem(config.auth.userInfoKey, JSON.stringify(userInfo));\n    return true;\n  } catch (error) {\n    console.error('Error storing auth data:', error);\n    return false;\n  }\n};\n\n// Get stored token\nexport const getStoredToken = () => {\n  try {\n    const token = localStorage.getItem(config.auth.tokenKey);\n    console.log('Retrieved token:', token ? 'Present' : 'Missing');\n    return token;\n  } catch (error) {\n    console.error('Error getting token:', error);\n    return null;\n  }\n};\n\n// Get stored user info\nexport const getStoredUserInfo = () => {\n  try {\n    const userInfo = localStorage.getItem(config.auth.userInfoKey);\n    console.log('Retrieved user info:', userInfo ? 'Present' : 'Missing');\n    return userInfo ? JSON.parse(userInfo) : null;\n  } catch (error) {\n    console.error('Error getting user info:', error);\n    return null;\n  }\n};\n\n// Clear stored auth data\nexport const clearAuthData = () => {\n  try {\n    console.log('Clearing auth data');\n    localStorage.removeItem(config.auth.tokenKey);\n    localStorage.removeItem(config.auth.userInfoKey);\n    return true;\n  } catch (error) {\n    console.error('Error clearing auth data:', error);\n    return false;\n  }\n};\n\n// Check if token is expired\nexport const isTokenExpired = token => {\n  if (!token) {\n    console.log('Token expiry check: No token provided');\n    return true;\n  }\n  try {\n    const tokenData = JSON.parse(atob(token.split('.')[1]));\n    const expirationTime = tokenData.exp * 1000; // Convert to milliseconds\n    const isExpired = Date.now() >= expirationTime;\n    console.log('Token expiry check:', {\n      expiresAt: new Date(expirationTime).toISOString(),\n      isExpired\n    });\n    return isExpired;\n  } catch (error) {\n    console.error('Error checking token expiration:', error);\n    return true;\n  }\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = () => {\n  const token = getStoredToken();\n  const userInfo = getStoredUserInfo();\n  const authenticated = token && userInfo && !isTokenExpired(token);\n  console.log('Authentication check:', {\n    hasToken: !!token,\n    hasUserInfo: !!userInfo,\n    isAuthenticated: authenticated\n  });\n  return authenticated;\n};","map":{"version":3,"names":["config","TOKEN_KEY","USER_INFO_KEY","storeAuthData","token","userInfo","console","log","localStorage","setItem","auth","tokenKey","userInfoKey","JSON","stringify","error","getStoredToken","getItem","getStoredUserInfo","parse","clearAuthData","removeItem","isTokenExpired","tokenData","atob","split","expirationTime","exp","isExpired","Date","now","expiresAt","toISOString","isAuthenticated","authenticated","hasToken","hasUserInfo"],"sources":["C:/Internship task/admin/src/utils/auth.js"],"sourcesContent":["import config from '../config';\r\n\r\n// Token storage keys\r\nconst TOKEN_KEY = 'token';\r\nconst USER_INFO_KEY = 'userInfo';\r\n\r\n// Store token and user info\r\nexport const storeAuthData = (token, userInfo) => {\r\n  try {\r\n    console.log('Storing auth data:', { token: !!token, userInfo: !!userInfo });\r\n    localStorage.setItem(config.auth.tokenKey, token);\r\n    localStorage.setItem(config.auth.userInfoKey, JSON.stringify(userInfo));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error storing auth data:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get stored token\r\nexport const getStoredToken = () => {\r\n  try {\r\n    const token = localStorage.getItem(config.auth.tokenKey);\r\n    console.log('Retrieved token:', token ? 'Present' : 'Missing');\r\n    return token;\r\n  } catch (error) {\r\n    console.error('Error getting token:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Get stored user info\r\nexport const getStoredUserInfo = () => {\r\n  try {\r\n    const userInfo = localStorage.getItem(config.auth.userInfoKey);\r\n    console.log('Retrieved user info:', userInfo ? 'Present' : 'Missing');\r\n    return userInfo ? JSON.parse(userInfo) : null;\r\n  } catch (error) {\r\n    console.error('Error getting user info:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Clear stored auth data\r\nexport const clearAuthData = () => {\r\n  try {\r\n    console.log('Clearing auth data');\r\n    localStorage.removeItem(config.auth.tokenKey);\r\n    localStorage.removeItem(config.auth.userInfoKey);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing auth data:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Check if token is expired\r\nexport const isTokenExpired = (token) => {\r\n  if (!token) {\r\n    console.log('Token expiry check: No token provided');\r\n    return true;\r\n  }\r\n  \r\n  try {\r\n    const tokenData = JSON.parse(atob(token.split('.')[1]));\r\n    const expirationTime = tokenData.exp * 1000; // Convert to milliseconds\r\n    const isExpired = Date.now() >= expirationTime;\r\n    console.log('Token expiry check:', {\r\n      expiresAt: new Date(expirationTime).toISOString(),\r\n      isExpired\r\n    });\r\n    return isExpired;\r\n  } catch (error) {\r\n    console.error('Error checking token expiration:', error);\r\n    return true;\r\n  }\r\n};\r\n\r\n// Check if user is authenticated\r\nexport const isAuthenticated = () => {\r\n  const token = getStoredToken();\r\n  const userInfo = getStoredUserInfo();\r\n  const authenticated = token && userInfo && !isTokenExpired(token);\r\n  \r\n  console.log('Authentication check:', {\r\n    hasToken: !!token,\r\n    hasUserInfo: !!userInfo,\r\n    isAuthenticated: authenticated\r\n  });\r\n  \r\n  return authenticated;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}