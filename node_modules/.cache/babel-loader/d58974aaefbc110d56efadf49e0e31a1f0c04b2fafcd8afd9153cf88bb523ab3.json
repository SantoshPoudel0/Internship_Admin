{"ast":null,"code":"// Token storage keys\nconst TOKEN_KEY = 'token';\nconst USER_INFO_KEY = 'userInfo';\n\n// Store token and user info\nexport const storeAuthData = (token, userInfo) => {\n  try {\n    localStorage.setItem(TOKEN_KEY, token);\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\n    return true;\n  } catch (error) {\n    console.error('Error storing auth data:', error);\n    return false;\n  }\n};\n\n// Get stored token\nexport const getStoredToken = () => {\n  try {\n    return localStorage.getItem(TOKEN_KEY);\n  } catch (error) {\n    console.error('Error getting token:', error);\n    return null;\n  }\n};\n\n// Get stored user info\nexport const getStoredUserInfo = () => {\n  try {\n    const userInfo = localStorage.getItem(USER_INFO_KEY);\n    return userInfo ? JSON.parse(userInfo) : null;\n  } catch (error) {\n    console.error('Error getting user info:', error);\n    return null;\n  }\n};\n\n// Clear stored auth data\nexport const clearAuthData = () => {\n  try {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(USER_INFO_KEY);\n    return true;\n  } catch (error) {\n    console.error('Error clearing auth data:', error);\n    return false;\n  }\n};\n\n// Check if token is expired\nexport const isTokenExpired = token => {\n  if (!token) return true;\n  try {\n    const tokenData = JSON.parse(atob(token.split('.')[1]));\n    const expirationTime = tokenData.exp * 1000; // Convert to milliseconds\n    return Date.now() >= expirationTime;\n  } catch (error) {\n    console.error('Error checking token expiration:', error);\n    return true;\n  }\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = () => {\n  const token = getStoredToken();\n  const userInfo = getStoredUserInfo();\n  return token && userInfo && !isTokenExpired(token);\n};","map":{"version":3,"names":["TOKEN_KEY","USER_INFO_KEY","storeAuthData","token","userInfo","localStorage","setItem","JSON","stringify","error","console","getStoredToken","getItem","getStoredUserInfo","parse","clearAuthData","removeItem","isTokenExpired","tokenData","atob","split","expirationTime","exp","Date","now","isAuthenticated"],"sources":["C:/Internship task/admin/src/utils/auth.js"],"sourcesContent":["// Token storage keys\r\nconst TOKEN_KEY = 'token';\r\nconst USER_INFO_KEY = 'userInfo';\r\n\r\n// Store token and user info\r\nexport const storeAuthData = (token, userInfo) => {\r\n  try {\r\n    localStorage.setItem(TOKEN_KEY, token);\r\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error storing auth data:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get stored token\r\nexport const getStoredToken = () => {\r\n  try {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n  } catch (error) {\r\n    console.error('Error getting token:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Get stored user info\r\nexport const getStoredUserInfo = () => {\r\n  try {\r\n    const userInfo = localStorage.getItem(USER_INFO_KEY);\r\n    return userInfo ? JSON.parse(userInfo) : null;\r\n  } catch (error) {\r\n    console.error('Error getting user info:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Clear stored auth data\r\nexport const clearAuthData = () => {\r\n  try {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem(USER_INFO_KEY);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing auth data:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Check if token is expired\r\nexport const isTokenExpired = (token) => {\r\n  if (!token) return true;\r\n  \r\n  try {\r\n    const tokenData = JSON.parse(atob(token.split('.')[1]));\r\n    const expirationTime = tokenData.exp * 1000; // Convert to milliseconds\r\n    return Date.now() >= expirationTime;\r\n  } catch (error) {\r\n    console.error('Error checking token expiration:', error);\r\n    return true;\r\n  }\r\n};\r\n\r\n// Check if user is authenticated\r\nexport const isAuthenticated = () => {\r\n  const token = getStoredToken();\r\n  const userInfo = getStoredUserInfo();\r\n  \r\n  return token && userInfo && !isTokenExpired(token);\r\n}; "],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,OAAO;AACzB,MAAMC,aAAa,GAAG,UAAU;;AAEhC;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAChD,IAAI;IACFC,YAAY,CAACC,OAAO,CAACN,SAAS,EAAEG,KAAK,CAAC;IACtCE,YAAY,CAACC,OAAO,CAACL,aAAa,EAAEM,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;IAC7D,OAAO,IAAI;EACb,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAI;IACF,OAAON,YAAY,CAACO,OAAO,CAACZ,SAAS,CAAC;EACxC,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,iBAAiB,GAAGA,CAAA,KAAM;EACrC,IAAI;IACF,MAAMT,QAAQ,GAAGC,YAAY,CAACO,OAAO,CAACX,aAAa,CAAC;IACpD,OAAOG,QAAQ,GAAGG,IAAI,CAACO,KAAK,CAACV,QAAQ,CAAC,GAAG,IAAI;EAC/C,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,aAAa,GAAGA,CAAA,KAAM;EACjC,IAAI;IACFV,YAAY,CAACW,UAAU,CAAChB,SAAS,CAAC;IAClCK,YAAY,CAACW,UAAU,CAACf,aAAa,CAAC;IACtC,OAAO,IAAI;EACb,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,cAAc,GAAId,KAAK,IAAK;EACvC,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;EAEvB,IAAI;IACF,MAAMe,SAAS,GAAGX,IAAI,CAACO,KAAK,CAACK,IAAI,CAAChB,KAAK,CAACiB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,MAAMC,cAAc,GAAGH,SAAS,CAACI,GAAG,GAAG,IAAI,CAAC,CAAC;IAC7C,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIH,cAAc;EACrC,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMgB,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMtB,KAAK,GAAGQ,cAAc,CAAC,CAAC;EAC9B,MAAMP,QAAQ,GAAGS,iBAAiB,CAAC,CAAC;EAEpC,OAAOV,KAAK,IAAIC,QAAQ,IAAI,CAACa,cAAc,CAACd,KAAK,CAAC;AACpD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}